% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Neurualnetwork.R
\name{NNetIterations}
\alias{NNetIterations}
\title{Neural networks for regression and binary classification}
\usage{
NNetIterations(X.mat, y.vec, fold.vec = sample(rep(1:n.folds),
  length(y.vec)), max.iterations, step.size, n.hidden.units, n.folds = 4)
}
\arguments{
\item{X.mat}{(feature matrix, n_observations x n_features)}

\item{y.vec}{(label vector, n_observations x 1)}

\item{max.iterations}{(int scalar > 1)}

\item{n.hidden.units}{(number of hidden units)}

\item{is.train}{(logical vector of size n_observations,
TRUE if the observation is in the train set, FALSE for the validation set)}
}
\value{
pred.mat (n_observations x max.iterations matrix of predicted values or n x k)

W.mat:final weight matrix(n_features+1 x n.hidden.units or p+1 x u)

v.vec: final weight vector (n.hidden.units+1 or u+1).

predict(testX.mat):
a function that takes a test features matrix and returns a vector of predictions
(real numbers for regression, probabilities for binary classification)
The first row of W.mat should be the intercept terms;
the first element of v.vec should be the intercept term.
}
\description{
Training by using nerual network with gradient descending
(real numbers for regression, probabilities for binary classification).
}
\examples{
Spam<-Prep_Spam()
folds.n = 4
Scalar.Step = 0.4
max.iterations = 3000L
fold.vec = as.double(sample(1:(folds.n),Spam$n_Elements,replace=T))
return.list = NNetEarlyStoppingCV(Spam$TrainingData, Spam$TrainingLabels,fold.vec,max.iterations,Scalar.Step,10,n.folds = 4)
Spam<-Prep_Spam()
Scalar.Step = 0.4
max.iterations = 1000L

folds.vec = as.logical(Random_Folds(Spam$n_Elements,1))
length(folds.vec)=Spam$n_Elements
List <-NNetIterations(Spam$TrainingData, Spam$TrainingLabels,max.iterations,Scalar.Step,10,folds.vec)
}
