write documentation for that R function, with at least two examples of how to
 use it (one for regression, one for binary classification).


** About this Package

** How to use this R Package
#+BEGIN_SRC R
install.packages("testthat")
library(testthat)
#+END_SRC

*** Functions:
- NN1toKmaxPredict is a C++ function interface, that takes several pointers and ...

*** NNLearnCV:
  How to use:
#+BEGIN_SRC c++
C++ Code
#+END_SRC

*** KNNLearnCV Program interface:

  
#+BEGIN_SRC R
KNNLearnCV<-function(TrainingInput, TrainingLabel, MaxNeighbors=30, TestVector = NULL, NumberOfFolds=5)
#+END_SRC



 - The number of MaxNeighbors
  KNNLearnCV <- function(
    TrainingInput, a NxP matrix from N-Examples P-parameters ,
    TrainingLabel, a Nx1 matrix from N-Examples P-parameters ,
    MaxNeighbors, Test from 1 to MaxNeighbors to find the best hyperparameter,
    TestVector, Vector that classifies individual rows in different folds,  
    NumberOfFolds, is the number of folds preformed,
  )
  
Note: If no value is entered for, MaxNeighbors=30, TestVector = NULL, NumberOfFolds=5, they will be substitued with an according value.
 - Make sure matrices are the proper size in respect to each other.
 

*** Use-cause Examples
Using ElemStatLearn's libraries to show how to use this library. 

** Example1 : Prostate
Using the ElemStatLearn::prostate library to show how to use the NNLearnCV function implemented:
#+BEGIN_SRC R

  Folds <- 3
  MaxNeighbors <- 30
  Local_prostate<- ElemStatLearn::prostate[,1:9]
  

  DataColsStart = 2
  DataColsEnd   = length(Local_prostate[1,]) -1
  LabelCol      = length(Local_prostate[1,])
  Rows          = length(Local_prostate[,1])
  
  #accesses first two Rows:
  #Local_SAheart[1:2,]
  #print(Local_prostate[,1])
  
  print(Local_prostate[Rows,])
  print(Rows)
  
  #Create New Fold Column to hold Fold Values
  Fold.vec <- Random_Folds(Rows,Folds)
  
  Projected_K = NNLearnCV(Local_prostate[,DataColsStart:DataColsEnd], Local_prostate[,LabelCol], MaxNeighbors, Fold.vec, Folds)
#+END_SRC

** Example2 : Ziptrain
Using the ElemStatLearn::ziptrain library to show how to use the NNLearnCV function implemented:
#+BEGIN_SRC R
 Local_ZipTrain<- ElemStatLearn::zip.train
#+END_SRC
  
  #Create New Fold Column to hold Fold Values
  Fold.vec <- Random_Folds(Rows,Folds)
  
  
  #Double Folding ? ~still a little confused where to implement the two instances of the Folds
  sanitize_TrainingData(Local_ZipTrain[,DataColsStart:DataColsEnd], Local_ZipTrain[,LabelCol], MaxNeighbors, Fold.vec, Folds)
  #Projected_K = NNLearnCV(Local_ZipTrain[,DataColsStart:DataColsEnd], Local_ZipTrain[,LabelCol], MaxNeighbors, Fold.vec, Folds)
  



**** Returns:
  - X.mat, y.vec: training data.
  - train.loss.mat, validation.loss.mat (matrices of loss values for each fold and number of neighbors).
  - train.loss.vec, validation.loss.vec (vectors with max.neighbors elements: mean loss over all folds).
  - selected.neighbors (number of neighbors selected by minimizing the mean validation loss).
  - predict(testX.mat), a function that takes a matrix of inputs/features and returns a vector of predictions. It should check the type/dimension of testX.mat and stop() with an informative error message if there are any issues.

**** HowToUse:


**** Notes/Conserns:

- while working on this project it took me a while to figure out
