% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NNLearnCV.R
\name{KNNLearnCV.Algorithm}
\alias{KNNLearnCV.Algorithm}
\title{KNNLearnCV.Algorithm}
\usage{
KNNLearnCV.Algorithm(X.mat, Y.vec, max.neighbors = 30, fold.vec = NULL,
  n.folds = 5)
}
\arguments{
\item{max.neighbors}{scalar integer, max number of neighbors}

\item{fold.vec}{vector indicating the fold each element is in [n]}

\item{TrainingData}{numeric imput feature matrix [n x p],}

\item{TrainingLabels}{numberic input label vector [n],
either all 0/1 for binary classification or other real numbers for regression}

\item{TestData}{numberic test festure vector [p], that is used to test the different hyperparameters for k (1 to MAX.K) of KNN}

\item{fold.n}{the number of folds that are to be preformed}
}
\value{
Returns a list with the following elements
     X.mat              = TrainingData numeric imput feature matrix [n x p],
     y.vec              = TrainingLabels numberic input label vector [n],
     train.loss.mat     =
     train.loss.vec     = Mean Error for each 1toKmax solution,
     selected.neighbors = The integer value of the otimal K for KNN,
     Predict            = Predict(X.), Function to preform the optimal K nearest neighbors selected,
}
\description{
Simple funtion that calls NN1toKmaxPredict.R function, and finds the most opatimal K value for KNN.
Returns a list of the produced Error Mean, a function wich uses the found hyperparameter K, with Lowest Error.
}
\examples{
~~ Example 1 ~~
Spam<-Prep_Spam()
Fold.vec = Random_Folds(Spam$n_Elements,4)
Fold.n   = 4
KNNLearnCV.List = NN1toKmaxPredict(TrainingData, TrainingLabels,TestData, 30)
#Where KNNLearnCV.List is a list containing the elements above, and you are free to use the returned values as you wish.

barplot(KNNLearnCV.List$train.loss.vec,main = "Spam: KNNLearnCV.L2TestError.FoldMeans",xlab = "KNN Compared",ylab = "Error",beside = TRUE)

~~ Example 2 ~~

Fold.vec = Random_Folds($n_Elements,4)
Fold.n   = 4
KNNLearnCV.List = NN1toKmaxPredict(TrainingData, TrainingLabels,TestData, 30)
#Where KNNLearnCV.List is a list containing the elements above, and you are free to use the returned values as you wish.

barplot(KNNLearnCV.List$train.loss.vec,main = "Spam: KNNLearnCV.L2TestError.FoldMeans",xlab = "KNN Compared",ylab = "Error",beside = TRUE)
}
