% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Temp3CV.R
\name{LinearModelL1CV}
\alias{LinearModelL1CV}
\title{Linear Model with L1 regularization using cross validation}
\usage{
LinearModelL1CV(X.mat, y.vec, fold.vec = sample(rep(1:n.folds, l =
  length(y.vec))), n.folds = 5L, penalty.vec = seq(1, 0.1, -0.1),
  step.size = 0.1)
}
\arguments{
\item{X.mat}{a numeric feature matrix of size n x p}

\item{y.vec}{a numeric labe vector of length nrow(X.mat)}

\item{fold.vec}{a numeric vector of lenght nrow(X.mat)}

\item{n.folds}{a positive integer indicate number of folds, default is 5}

\item{penalty.vec}{a non-negative numeric decreasing penalty vector, default is 1 to 0.1 with 0.1 decreament}

\item{step.size}{a positive numeric value, default is 0.1}
}
\description{
This algorithm splits the data into several folds and apply LinealModelL1penalites to each fold
}
\examples{
 Spam<-Prep_Spam()
 folds.n = 4L
 Scalar.Step = 0.4
 max.iterations = 3000L
 fold.vec = as.double(sample(1:(4L),Spam$n_Elements,replace=T))
 Scaled.Train  = scale(Spam$TrainingData)
 Initial.Vector <- array(as.matrix(rep(0,NCOL(Scaled.Train)+1)),dim=c(1,NCOL(Scaled.Train)+1))
 y.vec <- as.numeric(Spam$TrainingLabels)


result.list = LinearModelL1CV(Scaled.Train, y.vec,fold.vec = sample(rep(1:n.folds, l = length(y.vec))),n.folds = 5L,
penalty.vec = seq(1, 0.1, -0.1),step.size = 0.1)
}
